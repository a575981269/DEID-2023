# -*- coding: utf-8 -*-
"""HW8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/180IvdsGPaRJ0_878wDvcTeDOX9xQtt5K
"""

import re
import sys

def check_for_age(patient, note, chunk, output_handle):
    age_pattern = r'\b\d+\s*(?:YEAR|YR|YR OLD|YEARS OLD)\s*[A-Z]*\s*(?:FEMALE|MALE)\b'
    offset = 27
    output_handle.write('Patient {}\tNote {}\n'.format(patient, note))
    for match in re.finditer(age_pattern, chunk, flags=re.IGNORECASE):
        print(patient, note, end=' ')
        print((match.start()-offset), match.end()-offset, 'XX YEARS OLD')  # 模糊化年龄信息
        result = str(match.start()-offset) + ' ' + str(match.start()-offset) + ' ' + 'XX YEARS OLD'
        output_handle.write(result+'\n')

def deid_age(text_path='id.text', output_path='age.phi'):
    # start of each note has the patter: START_OF_RECORD=PATIENT||||NOTE||||
    # where PATIENT is the patient number and NOTE is the note number.
    start_of_record_pattern = '^start_of_record=(\d+)\|\|\|\|(\d+)\|\|\|\|$'

    # end of each note has the patter: ||||END_OF_RECORD
    end_of_record_pattern = '\|\|\|\|END_OF_RECORD$'

    # open the output file just once to save time on the time-intensive IO
    with open(output_path, 'w+') as output_file:
        with open(text_path) as text:
            # initialize an empty chunk. Go through the input file line by line
            # whenever we see the start_of_record pattern, note patient and note numbers and start
            # adding everything to the 'chunk' until we see the end_of_record.
            chunk = ''
            for line in text:
                record_start = re.findall(start_of_record_pattern, line, flags=re.IGNORECASE)
                if len(record_start):
                    patient, note = record_start[0]
                chunk += line

                # check to see if we have seen the end of one note
                record_end = re.findall(end_of_record_pattern, line, flags=re.IGNORECASE)

                if len(record_end):
                    # Now we have a full patient note stored in `chunk`, along with patient number and note number
                    # pass all to check_for_age to find and blur any age information in the note.
                    check_for_age(patient, note, chunk.strip(), output_file)

                    # initialize the chunk for the next note to be read
                    chunk = ''

if __name__ == "__main__":
    deid_age(sys.argv[1], sys.argv[2])

